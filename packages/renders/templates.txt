/*The commented code is basically a simple way of claiming the files from the directory and should be followed for small projects*/


package renders

import (
	"bytes"
	"html/template"
	"log"
	"net/http"
	"path/filepath"
)

//Renders a Template
func RenderTemplate(w http.ResponseWriter, tmpl string) {
	//create a template cache
	tc, err := createTemplateCache()
	if err != nil {
		log.Fatal(err)
	}
	// get requested template from cache
	t, ok := tc[tmpl]
	if !ok {
		log.Fatal(err)
	}
	buf := new(bytes.Buffer)
	err = t.Execute(buf,nil)
	if err!=nil {
		log.Println(err)
	}
	//render the template
	_, err = buf.WriteTo(w)
	if err != nil {
		log.Println(err)
	}

	// parsedTemplate, err := template.ParseFiles("templates/" + tmpl ,"./templates/base.layout.gohtml")
	// if err != nil {
	// 	http.Error(w, "Error in parsing template", http.StatusInternalServerError)
	// 	fmt.Println("error in parsing template: ", err)
	// 	return
	// }
	// err = parsedTemplate.Execute(w, nil)
	// if err != nil {
	// 	http.Error(w, "Error in executing template", http.StatusInternalServerError)
	// 	fmt.Println("error in executing template: ", err)
	// 	return
	// }
}

func createTemplateCache() (map[string]*template.Template, error) {
	// myCache := make(map[string]*template.Template)
	myCache := map[string]*template.Template{}

	//get all of the files named *.page.gohtml from ./templates
	pages, err := filepath.Glob("templates/*.page.gohtml")
	if err!=nil {
		return myCache, err
	}

	//range through all the files ending with *.page.gohtml
	for _, page := range pages{
		name := filepath.Base(page)
		ts, err := template.New(name).ParseFiles(page)
		if err != nil {
			return myCache,err
		}
		matches, err := filepath.Glob("templates/*.layout.gohtml")
		if err!=nil {
			return myCache,err
		}

		if len(matches)> 0{
			ts, err = ts.ParseGlob("templates/*.layout.gohtml")
			if err!=nil {
				return myCache, err
			}
		}

		myCache[name] = ts
	}
	return myCache , nil
	// return the map and an error if any occurred while creating it or reading existing templates into memory
}

/*-------------------This is the simple caching method---------------------------------*/

//Renders a template but adds it to cache whenever its furst loaded, and uses the cache memory to handle the page requests..

// var tc = make(map[string]*template.Template)
// func RenderTemplateTest(w http.ResponseWriter, t string) {
// 	var tmpl *template.Template
// 	var err error

// 	// check to see if we already have the template in our cache
// 	_, inMap := tc[t]
// 	if !inMap {
// 		//need to create the template
// 		log.Println("creating template and adding to cache")
// 		err = createTemplateCache(t)
// 		if err!=nil {
// 			log.Println(err)
// 		}
// 	} else {
// 		log.Println("using cached template")
// 	}

// 	tmpl = tc[t]
// 	err = tmpl.Execute(w, nil)
// 	if err!=nil {
// 		log.Println(err)
// 	}
// }

// func createTemplateCache(t string) error{
// 	templates := []string{
// 		fmt.Sprintf("./templates/%s", t),
// 		"./templates/base.layout.gohtml",
// 	}

// 	//parse the template
// 	tmpl, err := template.ParseFiles(templates...)
// 	if err != nil {
// 		return err
// 	}

// 	//add template to cache (map)
// 	tc[t] = tmpl

// 	return nil
// }

/*----------------------------------------------------------------------------------------*/

